>= 12.2.0
---------

- *CephFS*:

  * Several "ceph mds" commands have been obsoleted and replaced
    by equivalent "ceph fs" commands:
      - mds dump -> fs dump
      - mds getmap -> fs dump
      - mds stop -> mds deactivate
      - mds set_max_mds -> fs set max_mds
      - mds set -> fs set
      - mds cluster_down -> fs set cluster_down true
      - mds cluster_up -> fs set cluster_down false
      - mds add_data_pool -> fs add_data_pool
      - mds remove_data_pool -> fs rm_data_pool
      - mds rm_data_pool -> fs rm_data_pool


12.2.1
------

- *RGW*

  * dynamic resharding is now enabled by default, RGW will now automatically
  reshard the bucket index once the index grows beyond `rgw_max_objs_per_shard`

- *CephFS*:

  * Limiting MDS cache via a memory limit is now supported using the new
    mds_cache_memory_limit config option (1GB by default).  A cache reservation
    can also be specified using mds_cache_reservation as a percentage of the
    limit (5% by default). Limits by inode count are still supported using
    mds_cache_size. Setting mds_cache_size to 0 (the default) disables the
    inode limit.

* The maximum number of PGs per OSD before the monitor issues a
  warning has been reduced from 300 to 200 PGs.  200 is still twice
  the generally recommended target of 100 PGs per OSD.  This limit can
  be adjusted via the ``mon_max_pg_per_osd`` option on the
  monitors.  The older ``mon_pg_warn_max_per_osd`` option has been removed.

* Creating pools or adjusting pg_num will now fail if the change would
  make the number of PGs per OSD exceed the configured
  ``mon_max_pg_per_osd`` limit.  The option can be adjusted if it
  is really necessary to create a pool with more PGs.

* There was a bug in the PG mapping behavior of the new *upmap*
  feature. If you made use of this feature (e.g., via the `ceph osd
  pg-upmap-items` command), we recommend that all mappings be removed (via
  the `ceph osd rm-pg-upmap-items` command) before upgrading to this
  point release.

13.0.0
------

* The RBD C API's rbd_discard method now enforces a maximum length of
  2GB to match the C++ API's Image::discard method. This restriction
  prevents overflow of the result code.
